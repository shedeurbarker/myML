SIMsalabim project
Manual
version 5.22
S. Heester
M. Koopmans
L.J.A. Koster
May 26, 2025

Contents
1 Introduction 3
1.1 Why open-source? . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2 Why Pascal? . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.3 How to specify what you want to simulate? . . . . . . . . . . 4
2 What is currently included? 6
2.1 Basic equations . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.1.1 The Potential . . . . . . . . . . . . . . . . . . . . . . . 7
2.1.2 The Drift-Diffusion Equations . . . . . . . . . . . . . . 8
2.2 Boundary conditions . . . . . . . . . . . . . . . . . . . . . . . 10
2.3 Internal interfaces . . . . . . . . . . . . . . . . . . . . . . . . 11
2.4 Generation profile . . . . . . . . . . . . . . . . . . . . . . . . 13
2.5 Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.6 Trapping and Recombination . . . . . . . . . . . . . . . . . . 15
2.6.1 Direct Recombination . . . . . . . . . . . . . . . . . . 16
2.6.2 Bulk SRH Recombination . . . . . . . . . . . . . . . . 16
2.6.3 Interfacial SRH Recombination . . . . . . . . . . . . . 17
2.7 Ionic movement . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.8 Series and shunt resistances . . . . . . . . . . . . . . . . . . . 19
2.9 Iteration scheme and convergence . . . . . . . . . . . . . . . . 19
3 Input files 22
3.1 Device and simulations parameters . . . . . . . . . . . . . . . 22
3.2 Generation profile . . . . . . . . . . . . . . . . . . . . . . . . 23
3.3 Multiple trap levels . . . . . . . . . . . . . . . . . . . . . . . . 26
3.4 Experimental current-voltage characteristics . . . . . . . . . . 26
3.5 Voltage and generation rates in transient simulations . . . . . 27
1

CONTENTS CONTENTS
4 Output 29
4.1 Screen output . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
4.2 Current-voltage characteristic . . . . . . . . . . . . . . . . . . 31
4.3 Internal variables . . . . . . . . . . . . . . . . . . . . . . . . . 31
4.4 Solar cell parameters . . . . . . . . . . . . . . . . . . . . . . . 32
4.5 The log file . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
4.6 Exit codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
5 Description of all parameters 35
5.1 Introductory remarks . . . . . . . . . . . . . . . . . . . . . . . 35
5.2 Description of simulation parameters . . . . . . . . . . . . . . 36
5.2.1 Simulation setup . . . . . . . . . . . . . . . . . . . . . 36
5.2.2 Layer specific parameters . . . . . . . . . . . . . . . . 46
5.3 How to choose the numerical parameters . . . . . . . . . . . . 51
2

Chapter 1
Introduction
This project consists of two drift-diffusion simulation codes that are largely
based on the same code but do have their own use: For steady-state simu-
lations, including ions in stabilized scans, SimSS1 is most suited. One can
easily define a voltage range that should be used, a light intensity, etc. and
it will compute a current-voltage characteristic. SimSS can also extract the
typical performance characteristics when simulating a solar cell, or com-
pare a computed current-voltage characteristic with an experimental one
and show the error. Simulations are typically fast.
For transient simulations, ZimT,2 German for cinnamon, is much more
suitedanditcanalsodomoresimulations,includingsteady-stateones,tran-
sient photovoltage, impedance spectroscopy, etc. Much of the functionality
that SimSS has is also included in ZimT. However, ZimT reads-in a list of
times, voltages and generation rates supplied by the user (see section 3.5)
and then computes the resulting current density and voltage. For example,
by supplying an AC voltage of varying frequency, ZimT can be used to sim-
ulate an impedance spectroscopy experiment. Alternatively, one can switch
the light intensity from on to off and monitor how the current develops over
time, just like a transient photocurrent experiment.
1.1 Why open-source?
We have been developing and using this code for a long time. At some
pointwedecidedtomakeitopen-sourceinordertoachievethreeobjectives:
Firstly,toincreasethenumberofusersofthecode. Thiscanalsobeachieved
1Simulates Steady-State
2Zimulates Transients
3

1.2. WHY PASCAL?
by making it free-ware. However, in order to persuade others to use and
thus trust the code, it is helpful that anyone can see the code. This is
our second objective: transparency. All too often is the description of a
numerical simulation in an academic publication no more than a few lines in
the methods section. However, details matter and it should be clear what is
actually being calculated in order to appreciate—or replicate!—the results.
Lastly, at some point, there may even be other researchers who would like
to contribute to the code itself.
Open-source does not mean that anything goes: This project is licensed
under the GNU Lesser General Public License as stipulated in the license
files. When in doubt, check the license.
1.2 Why Pascal?
Yes, this project is written in Pascal and can be compiled using the Free
Pascal compiler. Pascal is highly suited to this project as it is a compiled
language (so it is fast). Speed (run-time) matters as a single simulation
can take anything from less than a second to several minutes or hours and
a typical research project requires many such simulations. An interpreted
language will result in longer run-times.
Pascal offers excellent readability: it is well-structured and most Pascal
words are based on the English language. This matters, especially for an
open-source project, as transparency is virtually meaningless if the code is
hard to understand. Additionally, Pascal has a high degree of type safety
and has a very strict syntax.
1.3 How to specify what you want to simulate?
SIMsalabim needs a description of the device you would like to simulate—
moreonthatlater—inadditiontoaspecificationoftheexperimentitshould
mimic. The latter can be, for example, a voltage sweep or a change in light
intensity. The software will then use the drift-diffusion model to simulate
the measurable outputs (current, voltage) and will also output the internal
variables (for example the carrier densities and the potential within the
device). Figure 1.1 outlines the basic work flow.
The device itself consists of two electrodes (left and right) and one or
moresemiconductinglayers. Sothesimplestdeviceconsistsofasinglesemi-
conductor sandwiched between two electrodes. More layers can be added,
so as to simulate a device with multiple transport layers and/or absorber
4

1.3. HOW TO SPECIFY WHAT YOU WANT TO SIMULATE?
Device Measured
parameters outputs
SIMsalabim
Experimental Internal
conditions Variables
Figure 1.1: Overview of the basic simulation work flow: The input speci-
fies the device (composed of the electrodes and as many layers as required)
andtheexperimentalconditionsthatshouldbemimickedbythesimulation.
SIMsalabim will then crunch the numbers and output the current-voltage-
time characteristics (the measured outputs in an experiment) and the inter-
nal variables in the device. The latter is not accessible in an experiment but
is highly useful to better understand the results.
layers. The interface between two semiconducting layers may or may not—
depending on the input—contain interfacial traps.
5

Chapter 2
What is currently included?
SIMsalabim does not claim to capture all the physics of any specific semi-
conductor device. It is the sole responsibility of the user to assess whether
this simulation is applicable or not. Thus, it is crucial to understand what
is included and what is not. The current version of SIMsalabim includes the
following:1
• Steady-state or fully transient simulations
• Arbitrarily many layers can be specified
• Mobile ionic species
• Doping
• Contacts are defined by their work function. The surface recombina-
tion velocities can be either finite or infinite.
• Trapping, multiple trap levels can be defined.
• Interfaces:
– offsets in conduction and valence bands
– differences in effective density-of-states
– differences in dielectric constant
– trapping and recombination
• Generation of free charges:
1Future versions may include/refine/modify the implemented physics.
6

2.1. BASIC EQUATIONS
– Different profiles
∗ Constant
∗ Generatedopticalabsorptionprofilebasedonthedevicestruc-
ture
∗ User-defined optical absorption profile
– either direct or Onsager-Braun
• Recombination processes:
– direct, band-to-band recombination
– trap-assisted recombination
– interface recombination
– geminate recombination
• Series and shunt resistances
• Tracking of open-circuit voltage (ZimT)
2.1 Basic equations
In this section, we will briefly outline what SimSS and ZimT calculate and
why. We will not put a lot of detail, but rather, we will include literature
references for the interested reader.
Figure 2.1 shows the basic band diagram used throughout. The device
may or may not have all the elements shown, depending on what the user
specifies. SimSS and ZimT solve the drift-diffusion equations in the layer(s)
between the electrodes.
2.1.1 The Potential
First of all, the Poisson equation relates the potential V(x) to the charge
density
(cid:18) (cid:19)
∂ ∂V(x)
ε(x) = q(n(x)−p(x)+C(x)), (2.1)
∂x ∂x
whereε(x)isthedielectricconstant, nandparethedensityoffreeelectrons
and holes. C(x) denotes any other charges that may be present, such as
7

2.1. BASIC EQUATIONS
cathode ETL main absorber HTL anode
Ec
Ev
interface
traps
Figure 2.1: Schematic band diagram showing a device that consists of three
layers (main absorber, electron and hole transport layers), cathode and an-
ode, and interface traps.
doping, ions, trapped charge carriers. In detail, the term C(x) follows from
C(x) =N (x)−N (x)+n (x)−p (x)) (2.2)
A D ion ion
M
(cid:88)
+ (se (x)−f (x))N (x)+(se (x)−f (x))N (x),
tb,j tb,j tb,j ti,j ti,j ti,j
j=1
where N and N are n- and p-doping densities (see N_D and N_A), n
D A ion
and p are the negative and positive ion densities. In this expression, we
ion
sum over the different trap levels j = 1...M, where M is the number of
trap levels. For each trap level, se and se is the charge-type of empty
ti,j tb,j
(no electron in the trap) interface / bulk traps and can have value 1 or
0, f and f are the fraction of filled bulk traps and interface traps in
tb,j ti,j
steady-state as defined in Refs 2 and 3, and N and N are the densities
tb,j ti,j
of bulk traps and interface traps. For more details on how f and f are
tb,j ti,j
calculated, see section 2.6.
2.1.2 The Drift-Diffusion Equations
The current continuity equations relate the electron (hole) current density
J (x)tothegeneration(G(x))andrecombination(R(x))rates. Insteady-
n(p)
state (SimSS), one has
∂J (x) ∂J (x)
n p
= − = −q(G(x)−R(x)), (2.3)
∂x ∂x
8

2.1. BASIC EQUATIONS
whereas ZimT solves the transient equations
∂n(x) 1∂J (x)
n
− = G(x)−R(x), (2.4)
∂t q ∂x
and
∂p(x) 1∂J (x)
p
+ = G(x)−R(x). (2.5)
∂t q ∂x
The flow of current is driven by gradients in the carrier densities and
the potential as described by the drift-diffusion equations. Provided there
are no heterojunctions—so the conduction and valence band edges and the
effective densities of states remain constant—then one has for electrons
∂V(x) ∂n(x)
J (x) = −qn(x)µ (x) +kTµ (x) , (2.6)
n n n
∂x ∂x
and for holes, one has
∂V(x) ∂p(x)
J (x) = −qp(x)µ (x) −kTµ (x) . (2.7)
p p p
∂x ∂x
Inthecaseofaheterojunction, theaccompanyingchangesinthebandedges
andtheeffectivedensitiesofstatesmodifythedrift-diffusionequations. This
can be accounted for by replacing the potential V(x) in Eqs (2.6) and (2.7)
with generalised potentials V (x) and V (x) for electrons and holes, re-
gn gp
spectively. This is detailed in section 2.3.
The total current density is then given by
J(x) = J (x)+J (x)+J (x)+J (x)+J (x), (2.8)
n p D nion pion
where J (x) is the displacement current, and J (x) are the negative
D n(p)ion
(positive) ion currents. In steady-state, the last three terms in Eq. (2.8) are
zero.2 The movement of ions is treated in section 2.7.
Both SimSS and ZimT iteratively solve a set of discretised equations: the
Poisson equation and the continuity equations are discretised and solved it-
eratively. ThesediscretisedequationscanbefoundinRef.1: Inthetransient
case, these take the form of Eqs (6.1-72, 73, and 74), where the transient
equations correspond to Eqs (6.4-32) and (6.4.33)3 in Ref. 1). In order to
improvetheconvergencebehaviour,theseequationsarelinearised,seeRef.3
for further details.
2We assume that ions cannot enter or leave the device.
3ThisequationinRef.1containsatypo: intheright-hand-sideoftheequation,n
i,j,m
should be p .
i,j,m
9

2.2. BOUNDARY CONDITIONS
a
)x(B
b
10
exact
8 approximated
6
4
2
0
−10 −5 0 5 10
x
401
×
rorre
absErrNew
1
0
−1
−2
−3
−4
−10 −5 0 5 10
x
Figure 2.2: The (a) approximated and exact Bernoulli functions, and (b)
the error.
The discretization of the drift-diffusion equations requires the use of the
Bernoulli function,1
x
B(x) = . (2.9)
ex−1
This function is used in every grid point and in every loop, so a fast im-
plementation of this function is of the essence. Moreover, simply using the
function as defined in Eq. (2.9) creates a problem if x = 0. To avoid these
issues, we use Taylor expansions around x = 0 and only use the full expres-
sion for very large absolute x—which is quite rare. Figure 2.2 shows the
exact and approximated Bernoulli function and the error of this approxima-
tion. As can be seen, the absolute error is smaller than 3.5×10−4, which
translates into a relative error of less than 8×10−4.
2.2 Boundary conditions
The boundary condition on the potential V is given by
qV −qV = W_L−W_R+qVint, (2.10)
R L
where V is the potential at the right (left) electrode, W_R(L) is the work
R(L)
function of the right (left) electrode, and Vint is the internally applied
voltage (see section 2.8).
Theboundaryconditionsonthecarrierdensitiescantakedifferentforms,
depending on the surface recombination velocities: If the surface recombi-
nation velocities (see S_n/p_L/R) are infinitely large, we simply assume that
10

2.3. INTERNAL INTERFACES
thecarrierdensitiesatthecontactsfollowfromthedifferencebetweenthelo-
calconductionorvalencebandedgeandtheworkfunctionoftheelectrodes.
At the right electrode (anode), we have for electrons
(cid:18) (cid:19)
E_c−W_R
n = n = N_cexp , (2.11)
R eq
kT
where n is the equilibrium electron density at this contact. If the surface
eq
recombination velocity is finite, then we use
J = qS_n_R(n −n ), (2.12)
n R eq
butonlyiftheelectronsareextractedatthiselectrode(J < 0). Ifelectrons
n
are injected, we use Eq. (2.11). For holes at the right electrode, one has
(cid:18) (cid:19)
E_v−W_R
p = p = N_cexp − , (2.13)
R eq
kT
wherep istheequilibriumholedensityatthiscontact. Again,ifthesurface
eq
recombination velocity is finite, then we use
J = qS_p_R(p −p ), (2.14)
p R eq
but only if the holes are extracted at this electrode (J < 0). If holes are
p
injected, weuseEq.(2.13). Thedensitiesattheleftelectrodeareanalogous.
2.3 Internal interfaces
Theinternalinterfacesbetweenthedifferentlayersmodifythedrift-diffusion
equations. Inordertoaccountfordifferencesintheconduction/valenceband
levels and the effective densities of states, one can replace the potential V in
Eqs (2.6) and (2.7) with the generalised potentials V and V for electrons
gn gp
and holes, respectively.
If the conduction/valence band edge (E (x)) differs across the layers
c/v
in the simulation volume, then the generalised potentials are defined as4,5
∆E
c
V (x) = V(x)− , (2.15)
gn
q
and
∆E
v
V (x) = V(x)− , (2.16)
gp
q
where ∆E is the change in conduction/valence band offset.
c/v
11

2.3. INTERNAL INTERFACES
To account for changes in the effective densities of states,4 these gener-
alised potentials are modified by the introduction of Γ as in Eqs (14) and
(15) in Ref. 7. By taking the effective density of states in a layer (N ) as a
c
reference,11 we have
kT N (x)
c
Γ = ln . (2.17)
q N
c
This changes to generalised potentials to
∆E
c
V (x) = V(x)− +Γ, (2.18)
gn
q
and
∆E
v
V (x) = V(x)− −Γ. (2.19)
gp
q
Thecurrentdensityacrossinterfacesrequiresalittlecare. Inthethermionic
emission model, the current across an interface between grid points i and
i+1—shown for electrons—is given by6
(cid:20) (cid:18) (cid:19)(cid:21)
∆E
c
J = qS n −n exp − , (2.20)
ni T i i+1
kT
where S is the transfer velocity. Note, this expression is only valid if
T
the effective densities of states at either side of the interface are equal.6
Moreover,itdoesnottakeintoaccountanyelectricfieldacrosstheinterface.
SIMsalabim uses a slightly different expression across the interface that
doestakeintoaccountanydifferenceineffectivedensityofstatesandelectric
field:7
(cid:20) (cid:18) (cid:19) (cid:18) (cid:19)(cid:21)
V −V V −V
gni gni+1 gni+1 gni
J = qν n B −n B , (2.21)
ni int i i+1
V V
t t
where ν (parameter nu_int_n) is the interface transfer velocity. In the
int
absence of an electric field across the interface and assuming equal densities
of states at either side of the interface, Eq. (2.21) reduces to
(cid:18) (cid:19)(cid:20) (cid:18) (cid:19)(cid:21)
∆E ∆E
c c
J = qν B − n −n exp − . (2.22)
ni int i i+1
kT kT
By comparing Eqs (2.20) and (2.22), we can convert S into ν :
T int
(cid:18) (cid:19)
∆E
c
S = ν B − . (2.23)
T int
kT
4We take the effective density of states of the conduction band equal to that of the
valence band.
12

2.4. GENERATION PROFILE
2.4 Generation profile
Theeffectsofthedevicestructureandlayerpropertiesonthegenerationrate
of electron-hole pairs can be taken into account by calculating the optical
absorption profile, or generation profile, using the optical transfer matrix
model as presented in Refs. 8 and 9. In this model a multilayer device is
considered with N layers. The main properties of interest for a layer with
indexj areitsthicknessd andthecomplexindexofrefractionn˜ = n +ik
j j j j
of the layer material. Assumed is that all layers are homogeneous, isotropic
and interfaces between layers are parallel. It is also assumed that every
photon generates an electron-hole pair.
The generation rate G in layer j as a function of the position x in the
j
device and wavelength λ is given by
λ
G (x,λ) = Q (x,λ) (2.24)
j j
hc
where h is Planck’s constant and c the speed of light. Q (x,λ) is the time
j
average of the energy dissipated per second in layer j for wavelength λ and
is given by
1
Q (x,λ) = cϵ α n |E (x)|2 (2.25)
j 0 j j j
2
where ϵ is the vacuum permittivity, α is the absorption coefficient and
0 j
E (x) the optical electric field at a position x in layer j.
j
In general, the optical electric field at ambient side and substrate side of
the device are related via a scattering matrix (transfer matrix) as
E+,− = SE+,− (2.26)
0 m
where E+,− represents either the forward and the backward component of
the optical electric field. The scattering matrix S consists of the product of
interface and layer matrices.
An interface matrix describes the behaviour of a wave at an interface
between two layers in the device. Using the Fresnel complex reflection r
jk
and transmission t coefficients, it is given by
jk
1 (cid:20) 1 r (cid:21) (cid:34)n˜j+n˜ k n˜j−n˜ k (cid:35)
I = jk = 2n˜j 2n˜j (2.27)
jk t jk r jk 1 n˜j 2 − n˜j n˜ k n˜j 2 + n˜j n˜ k
A layer matrix describes the propagation of a wave through a layer and is
given by
(cid:20) (cid:21)
exp(−iξ d ) 0
L = j j (2.28)
j 0 exp(iξ d )
j j
13

2.4. GENERATION PROFILE
where ξ =
2πn˜j.
Multiplied, ξ d represents the phase change a wave expe-
j λ j j
riences when travelling trough the layer.
To determine the optical electric field inside a layer j for position x,
E (x), the scattering matrix S is split into two subsets, separated by layer
j
j
S = S′L S′′ (2.29)
j
where S′ represents the components of the scattering matrix before L and
j
S′′ the components of the scattering matrix after L . They are defined as
j
(cid:20) S′ S′ (cid:21) (cid:32)j (cid:89) −1 (cid:33)
S′ = j,11 j,12 = I L I (2.30)
j S′ S′ (v−1)v v (j−1)j
j,21 j,22
v=1
 
(cid:20) S′′ S′′ (cid:21) (cid:89) N
S j ′′ = S j ′′ ,11 S j ′′ ,12 =  I (v−1)v L vI N(N+1) (2.31)
j,21 j,22
v=j+1
The total optical electric field in layer j at position x is given by
(cid:104) (cid:105)
E (x) = E+(x)+E−(x) = t+exp(iξ x)+t−exp(−iξ x) E+ (2.32)
j j j j j j j 0
where t+ and t− are the internal transfer coefficients in the positive and
j j
negative direction.10 This expression can be rewritten using the scattering
matrices
S′′ exp(−iξ (d −x))+S′′ exp(iξ (d −x))
E (x) = j,11 j j j,21 j j E+ (2.33)
j S′ S′′ exp(−iξ d )+S′ S′′ exp(iξ d ) 0
j,11 j,11 j j j,12 j,21 j j
where E+ is the optical electric field at the first interface, which is related
0
to the irradiance I .
0
Finally, totakeintoaccountthefullsolarspectrum, weneedtointegrate
the generation rate G(x,λ) over λ
(cid:90) λmax
G(x) = G(x,λ)dλ (2.34)
λmin
where λ in and λ are the lower and upper bound of the spectrum in
m max
terms of wavelength.
14

2.5. GENERATION
2.5 Generation
SimSS and ZimT equate the generation rate of free electrons and holes either
to the generation rate of electron-hole pairs (parameter G_ehp)–common in
non-excitonic materials—or they consider that such electron-hole pairs may
be subject to geminate recombination losses.12–14 If such geminate losses
are taken into account (fieldDepG=1), then the generation rate is reduced
by a factor P(x), given by
P(x) = P0+(1−P0)p(a,T,F), (2.35)
where p(a,T,F) is the Onsager-Braun dissociation probability,14 a is the
charge separation distance, and P0 is the fraction of electron-hole pairs that
directly yield free carriers. The dissociation probability p(a,T,F) can be
integrated over a distribution of electron-hole pair distances, i.e.,
(cid:90) ∞
P(a,T,F) = p(y,T,F)g(a,y)dy, (2.36)
0
where g(a,y) is a normalized distribution function that can be specified by
parameter thermLengDist.
2.6 Trapping and Recombination
By their very nature, traps capture charge carriers. It is critical to under-
stand their effects on a device in order to judge their relevance. Trapped
charge carriers contribute to the space charge (see Eq. 2.1), without con-
tributing to charge transport. Additionally, trap levels introduce another
recombination pathway. Both effects are typically bad for device perfor-
mance.
In transient simulations, things get a little bit more complicated as the
trapping and/or detrapping can take rather long and, therefore, it might
take a long time (as compared to the simulated time) before equilibrium is
reached. This is especially relevant to cases where there is a distribution of
traps, giving rise to multiple trapping/detrapping times.
In sum, traps can have a large impact on the simulations, depending on
what is simulated and in what regime.
The non-geminate recombination of electrons and holes can proceed via
different mechanisms: direct or band-to-band recombination; trap-assisted
or Shockley-Read-Hall (SRH) recombination; and surface recombination.5
Surface recombination is described in section 2.2.
5Auger recombination is currently not implemented.
15

2.6. TRAPPING AND RECOMBINATION
2.6.1 Direct Recombination
The recombination rate of direct recombination rate is given by
R = γ(np−n2), (2.37)
direct i
where n is the intrinsic carrier density, and γ is the direct recombination
i
rate constant.
The rate constant γ can be set via different routes: It can be based on
the Langevin expression (useLangevin=1), in which case:
q
γ = preLangevin (µ (x)+µ (x)), (2.38)
n p
ε(x)
where the mobilities µ and relative dielectric constant ε can depend on
n,p
position.6 The Langevin prefactor preLangevin is motivated by the ob-
servation that the recombination rate can be (substantially) smaller than
the Langevin value in organic solar cells, while the Langevin expression it-
self serves as an upper limit to the rate in pristine organic semiconductors.
Alternatively, the rate constant can be defined directly via k_direct, if
useLangevin=0.
If the Onsager-Braun model for geminate recombination is used (see
section 2.5), then the direct recombination rate is reduced by a factor of
1−P(a,T,F).13
2.6.2 Bulk SRH Recombination
For simplicity and notational convenience, we show the recombination ex-
pressionsperenergylevel, i.e.thisiswhatisusedifthereisbutasingletrap
level. If there are multiple trap levels, then the total SRH recombination
rate is simply the sum over the individual trap levels.
Insteadystate,bulkSRHrecombinationiscalculatedbasedontherate
C_n_bulkC_p_bulkN_t_bulk
R = (np−n2), (2.39)
SHR,bulk C_n_bulk(n+n )+C_p_bulk(p+p ) i
1 1
where C_n,p_bulk are the capture coefficients, N_t_bulk is the density of
traps, and n(p) is the electron (hole) density when the quasi-Fermi level
1
matches the trap energy (E_t_bulk).
6Theseparameterscan,afterall,bedifferentforthedifferentlayersinthedevice. The
mobilities, however, can also depend on the position if they depend on the local electric
field.
16

2.6. TRAPPING AND RECOMBINATION
In transient simulations, we use SRH trapping and detrapping rates to
form net rates for electron and hole trapping, viz.
R = C nN (1−f )−C n N f (2.40)
n n tb tb n 1 tb tb
and
R = C pN f −C p N (1−f ), (2.41)
p p tb tb p 1 tb tb
where f is calculated using the value from the previous time step and
tb
calculating the emission and absorption rates based on the new carrier den-
sities found in the current time step. This is done by solving the ordinary
differential equation,
∂f (t)
tb
= C n(1−f )−C n f +C p (1−f )−C pf , (2.42)
n tb n 1 tb p 1 tb p tb
∂t
where C and C are the capture coefficients for electrons and holes and
n p
n(p) is the electron (hole) density when the quasi-Fermi level matches the
1
trap energy (E_t_bulk). We get a solution
C n+C p
n p 1
f (t) = (2.43)
tb
C n+C n +C p +C p
n n 1 p 1 p
(cid:0) (cid:1)
+c exp −(C n+C n +C p +C p)t ,
1 n n 1 p 1 p
where we can express c in terms of the trap filling at time zero (f (0)) as
1 tb
C n+C p
n p 1
c = f (0)− . (2.44)
1 tb
C n+C n +C p +C p
n n 1 p 1 p
Now we can calculate a trap filling at a time t with the new electron and
hole densities n, p and f (0). This can be done analogously for interface
tb
traps.3
2.6.3 Interfacial SRH Recombination
TheSRHexpressionneedsmodificationifonewantstousethatformalismat
an interface. By interface, we mean the interface between the selected layer
andthelayertotheright. Atsuchaninterface,trappingandde-trappingcan
occur to either side of the interface. This is valid for every layer except for
the rightmost layer, where there is an interface with the electrode. There
we do not take interfacial SRH recombination into account. In order to
take all these possible processes into account, we have re-derived the SRH
expression. Details can be found in Koopmans et al. in Ref. 3.
17

2.7. IONIC MOVEMENT
2.7 Ionic movement
BothSimSSandZimTincludetheeffectsofionicspecies. Theirmotionisde-
scribed by the same drift-diffusion equations that are used for electrons and
holes, yet without the possibility of leaving or entering the device through
the electrodes, or via generation/recombination processes. In other words,
their total number is conserved throughout the simulation.
The properties that define ionic movement are specified per layer. The
concentrationsandmobilitiesofanionsandcationsaresetviaN_anion, N_cation
and mu_anion, mu_cation, respectively. Whether ions can move into adja-
cent layers or not is set by IonsMayEnter. As there can be multiple (adja-
cent) layers where ions can or cannot enter, we define ionic regions. This is
a group of adjacent layers that can accept ions. Different ionic regions are
separated by layers that cannot accept ions or by the contacts. An example
is illustrated in figure 2.3.
Figure 2.3: Schematic drawing of ionic regions. Suppose we have 6 adjacent
layers, the two layers next to the electrodes contain ions, the layers next
to them have IonsMayEnter=1, but the other layers cannot accept ions
(IonsMayEnter=0). Then we end up with ions in 4 layers, but they form
two regions with ions that are not connected.
18

2.8. SERIES AND SHUNT RESISTANCES
2.8 Series and shunt resistances
Figure 2.4 shows the equivalent circuit that SimSS and ZimT use.7 However,
the way this circuit is used differs for the two codes.
SimSStreatstheappliedvoltages(asspecifiedbyparametersVmin,Vmax,
etc.) as the voltage across the simulation volume, i.e. as Vint, the internal
voltage. When using finite shunt and/or series resistances, it calculates
the corresponding external voltage and current density as measured by an
experimenter. Boththeinternal(Vint,Jint)aswellastheexternalvoltages
and currents (Vext and Jext) are stored.8 Any current (Jshunt) flowing
through the shunt resistance is also stored. The varFile stores how the
internalvariablesdependonpositionwithinthedevice. Astheseareinternal
to the simulation volume they do not contain any contributions from the
series or shunt resistances.
ZimTisalittlebitmoresophisticatedinthatittreatstheappliedvoltage
(as specified by the input tVGFile, see section 3.5) as the external voltage
Vext. Thus, if there is a (finite) series resistance, ZimT will solve for the
voltage that is applied to the electrodes (i.e. Vint) by using another iter-
ation loop. This arrangement makes it possible, for example, to use ZimT
to simulate an RC-circuit, or transient measurements where one needs to
consider the internal series resistance of the source.9
2.9 Iteration scheme and convergence
ThesystemofequationsformedbythePoissonandcontinuityequationsare
solved in an iterative manner (see Fig. 2.5) based on the work of Gummel.15
First, a guess is made for the potential and the carrier densities. With this
guess, a correction δV(x) to the potential is calculated from the Poisson
equation: this Poisson solver is iterative and keeps on improving the po-
tential until the changes δV become very small (i.e. smaller than tolPois).
This new potential is then used to update the carrier densities by solving
the continuity equations. This process, the main loop, is repeated until
7I realise that these hand-drawn images may look a bit primative. I hope, however,
that they add a personal touch. Besides, I do not want to spend too much time on stuff
like this.
8Any comparison done with an experimental, user-supplied current-voltage character-
istic is based on the external voltage and current.
9ZimT can also be used in steady-state, see section 3.5. Thus, it is possible to specify
the external voltage Vext while still incorporating a finite series resistance by using ZimT
instead of SimSS.
19

2.9. ITERATION SCHEME AND CONVERGENCE
Figure2.4: Equivalentcircuitillustratingthemeaningoftheinternalvoltage
and current versus the external ones.
convergence is reached.
How do we know when the main loop has converged? Of course, the
Poisson solver should have converged. Additionally, we monitor the relative
change to the carrier densities in each main loop. If this change is smaller
than a preset tolerance (tolDens), then the main loop stops. Next, the
programcomputestheinternalandexternalcurrentdensitiesandtheirerror.
The error (in A/m2, so it is absolute rather than relative) is based on the
root-mean-square deviation of the current from its average value.
20

2.9. ITERATION SCHEME AND CONVERGENCE
Figure 2.5: Simplified flow diagram of the simulation program. To solve
the basic equations, Gummel iteration is used. First, the internal voltage
Vint is applied to the electrodes (see Eq. (2.10)) and a guess is made for
the potential and carrier densities. Subsequently, a correction δV to the
potential is calculated from the Poisson equation. This correction is added
to the potential V and this is repeated until convergence is reached. Next,
the carrier densities are calculated from the new potential by solving the
continuity equations. This entire procedure is repeated until converged is
reached. The external current and voltage, Jext and Vext are calculated
and the output is shown.
21

Chapter 3
Input files
In order to run SimSS or ZimT a number of input files must be used.
3.1 Device and simulations parameters
The most important input files are the ones that specify all properties of
the device and layers, where input and output files can be found, etc. By
default, the SimSS and ZimT look for a file called simulation_setup.txt
for the device and simulation parameters. The parameters that define each
layer are in separate files as specified in simulation_setup.txt. All input
andoutputfilesaresimple textfilesandarehuman-readable. Forinputfiles
and the logFile, we use the extension .txt, while for output files that are
used to store or plot data, we prefer the .dat extension.
The simulation_setup.txt file starts like this:1
** SimSS Simulation Setup:
** version: 5.22
**General***********************************************
T = 295 * K, absolute temperature
**Layers************************************************
l1 = L1_parameters.txt * parameter file for layer 1, mandatory
l2 = L2_parameters.txt * parameter file for layer 2
...
1ZimT’s parameter file is similar.
22

3.2. GENERATION PROFILE
The order of the parameters is fixed and cannot be changed. However,
comments may be added by simply inserting an asterisk at the end of a line
(like shown above). If the comment is to be left-justified, use two asterisks.
Section 5 lists and defines all parameters. For a detailed description of these
files and the parameters, refer to chapter 5.
An important remark, an interface defined in a layer parameter file al-
ways refers to the interface with the current layer and the adjacent layer
to the right. This holds for all layers except for the interface between the
rightmost layer and the contact, which we do not treat as a relevant in-
terface. The parameters that define the interface are specified in the block
Interface-layer-to-right. Each layer file must have such a block, even if it is
the last (rightmost) layer in the device stack.
It is also possible to specify a different device parameter file via the
command line. This must be the first parameter that is passed and should
simply state the name of the file:
./zimt different_par_file.txt
Now ZimT will look for file different_par_file.txt. Of course, such a
parameter file must have the same structure and parameters as the default
one. Again, one can change other general parameters values via the com-
mand line like
./zimt different_par_file.txt -T 350
or layer specific parameters like
./zimt different_par_file.txt -l1.L 150E-9
3.2 Generation profile
Light absorption in the layer can be uniform (i.e. constant versus position)
or follow either an user-defined profile or a generated profile as described in
section2.4. Whichprofileisused,issetbytheparametergenProfile. Ifset
to ‘none’, a uniform generation profile is used. If set to ‘calc’, the generation
profile is calculated using the transfer matrices. In any other case, the value
of genProfile is treated as a filename. Parameter layerGen can be used
to indicate whether a layer absorbs / generates electron-hole pairs or not.
The case of an user-defined profile is specified by setting the parameter
genProfile to the name of the file with the generation profile. The defini-
tionofthefileformatisprettybasic. Theremust beaheader,butcomments
23

3.2. GENERATION PROFILE
may be added before or after the header (or even by simply adding text at
the end of the line that contains the header). The header must look as
shown below, but it is not case-sensitive. Note: x need be in real units as
the last x-coordinate is re-scaled to the full device thickness, i.e. the sum
of each layer thickness L. This means that the generation profile includes
all layers that absorbs / generates electron-hole pairs. The generation rate
G_ehp, however must be absolute and in m−3 s−1. The actual magnitude of
the profile is multiplied by G_frac. An example:
* we can start with comments, but it’s fully optional
* there must be a line that starts with x G_ehp.
x G_ehp * Note: G_ehp is in m-3 s-1.
0 1e27
2 1.1e27
3 1.5e27
4 2e27
This yields a profile that has its maximum absorption at the right electrode
(x-coordinate 4 will be scaled to the total thickness of the device).
The case of a calculated profile is controlled by parameter genProfile.
Inthiscase,thegenerationprofileiscalculatedbasedonthedevicestructure,
which for example with three layers takes on the following structure, where
layers with a ∗ must always be defined:
• Substrate∗
• ITO
• Layer 1
• Layer 2
• Layer 3
• Back layer∗
For each relevant layer there must be a thickness defined and a file contain-
ing the refractive index n and extinction coefficient k per wavelength λ.2
The shortest wavelength defined must be equal or smaller than lambda_min
and similar, the longest wavelength defined must be equal or larger than
lambda_max. This can be extended with as many layers as needed.
An example of a file with n, k values with the required header line:
2Please note, λ is in metres.
24

3.2. GENERATION PROFILE
]1-s3-m
7201[
phe_G
6
5
4
3
l1.layerGen = 1
2 l1.layerGen = 0
1
0
0 50 100 150 200 250 300
x [nm]
Figure 3.1: This example shows a user-supplied generation profile: it should
specify the generation rate of electron-hole pairs (G_ehp) in the entire simu-
lation volume, so all defined layers. If any layer does not absorb, then either
thegenerationprofilecanbesettozerointhelayer,oronecansetlayerGen
to zero: this will override the profile and ensures that the generation rate in
the layer is zero (see the red line, where layerGen = 0 in the first layer).
lambda n k
300E-9 1.75 0.1888075
305E-9 1.75 0.176253
310E-9 1.73 0.16639
The substrate layer (e.g. glass or an anti reflective coating) is an exception
to this, because it does not require the definition of a thickness, only a n,k
file. The reason for this is that the substrate layer is only used to calculate
the initial transmission/reflection at the first interface.
The solar spectrum used (e.g. AM1.5) is controlled by the parameter
spectrum. The same conditions on the wavelength range as for the n,k files
apply here. An example of a spectrum file with the required header line:
lambda I
300.0E-9 1.0205E+06
305.0E-9 1.6463E+07
310.5E-9 6.5540E+07
25

3.3. MULTIPLE TRAP LEVELS
The generated profile contains the actual magnitude of the generation rate,
the value for G_ehp is ignored in this case. Please note, λ is in metres, I is
in W/m3.
Forboththespectrumandthefileswithn,kvaluestheminimalrequired
spacing between consecutive wavelengths is defined by minDeltaLambda in
unit DDTypesAndConstants. The maximum supported number of decimal
digits of precision for the wavelength is 6, anything beyond this is ignored.
3.3 Multiple trap levels
In order to specify multiple trap levels (either in the bulk, or at interfaces),
theusercansupplyafileforeitherbulkorinterfacetraps. Thenameofthese
files is specified by parameter bulk/intTrapFile. The input parameters
N_t_bulkandN_t_bulkareignoredifusingtheinputfiles. Theinputfile(s)
specifiestheenergy(ineVbelowvacuum,sopositive)andthecorresponding
densityoftraps. Forbulktraps,thelatterisinm−3,whileforinterfacetraps
thisisinm−2. Theorderofthetraplevelsisofnoconsequence. Anexample
of bulkTrapFile:
E Ntrap *header, must be there!
4 1e15 comments may be added
4.2 8e14
4.4 2e14
This introduces three trap levels in the bulk.
After reading the trap energies, a number of checks are performed to
ensure that the energies make sense given the conduction and valence band
energies of the layer that contains the traps. Columns ntb and nti in the
varFile list the total density of electrons trapped in bulk, resp. interface
traps.
3.4 Experimental current-voltage characteristics
SimSS can read an experimental current-voltage curve and compare it with
its simulated result. If useExpData = 1 then SimSS will try to read the
curve from file expJV. This file should contain a header (‘Vext Jext’, not
case-sensitive) and then a list of voltages (in V) and current densities (in
A/m2). Note: the short-circuit current density is negative.
26

3.5. VOLTAGE AND GENERATION RATES IN TRANSIENT
SIMULATIONS
There should be at least minExpData,3 and there should be a sweep over
voltages, either up or down. Using an experimental curve overrides all other
specifications of voltages (both in the parameter file and values parsed via
the command line). Once the current-voltage curve has been simulated the
two are compared and deviations are shown on screen.
An example:
Vext Jext * mandatory header
*comments are optional!
0 -10.1
0.2 -5.2
0.3 -1
0.4 0.1
0.5 3.0
3.5 Voltage and generation rates in transient sim-
ulations
ZimTrequiresafile(tVGFile)tospecifywhichtimes, externalvoltages4 and
relative generation rates G_frac) should be simulated.
This file must contain the correct header and may contain comments.
For example:
*You could put a brief explanation about what this file does.
*Fully optional though.
t Vext G_frac comments
0 0 1 no comments!
1e-3 0.1 1 more voltage!
2e-3 0.1 1
3e-3 0.1 1.1 a bit more light
4e-3 oc 2 now try to find Voc.
The comments are optional and ZimT ignores them but the t Vext G_frac
part is mandatory and this should not be preceded by any other characters
onthatline. IfZimTcannotfindthesecharacters(whitespaceisignored,not
case-sensitive) it stops. The first time should be 0 as this corresponds to a
steady-stateconditionatthestartofthesimulation. Timeandvoltagearein
3This constant is provided by unit DDTypesAndConstants.
4The maximum (absolute) voltage that is accepted depends on the size of the floating
point type used (type myReal defined in unit TypesAndConstants).
27

3.5. VOLTAGE AND GENERATION RATES IN TRANSIENT
SIMULATIONS
SI units, so seconds and volts. G_frac is the fractional generation rate. The
total rate of electron hole pairs is the product of the calculated profile—if
using the transfer matrix algorithm—or the G_ehp of the respective layers.
In order to simulate a transient photovoltage experiment, or just an
open-circuit, the voltage may be specified as oc—for open-circuit. ZimT will
then solve for the correct applied voltage such that the current density is
close to zero.
ZimT reads this file, calculates a time step, reads another line, etc. ZimT
can also be used to do a steady-state voltage sweep, just like SimSS by
simply putting all times to 0.5 While it is not possible to go back in time,
it is possible to go back to the steady-state condition (t=0).
5ZimT interprets 0 time as an infinite time-step, which results in steady-state.
28

Chapter 4
Output
4.1 Screen output
SimSS shows its progress by listing the voltage and current (Vint, Jext)1
it has found, including an estimate of the error on the current (see section
2.9). If the simulation at some voltage fails to converge, then the user is
warned and the current is not shown. If SimSS suspects that the user is
simulating a solar cell under illumination, then it will try to obtain and
display the main PV parameters (fill-factor, short-circuit current density,
etc.). These parameters are calculated based on the external current and
voltage, see section 2.8. So, if there is a finite series resistance (R_series),
andVint=0isoneofthesimulatedvoltages,thenSimSSwillnotnecessarily
have simulated the short-circuit condition (Vext = 0) and will, therefore,
use interpolation to estimate the short-circuit current density. The error
margins that SimSS shows are purely based on interpolation errors and their
propagation: they do not take into account any inaccuracies due to grid
spacing, or tolerances of the iterative solvers.
If an external current-voltage curve is used,2 then SimSS will also calcu-
late and show the PV parameters for the external curve so the two can be
compared: both the simulated and the experimental parameters are shown
aswellastheirdifferences. Additionally, SimSSwillcalculateafiterrorsuch
thatsimulatedandexperimentalcurrent-voltagecurvescanbecompareddi-
rectly: this error compares the curves, not just the main PV parameters as
defined by parameter fit_mode. Note, this comparison is also done if the
simulated device is not a solar cell. The fit error is defined as the area
1See section 2.8
2See useExpData.
29

4.1. SCREEN OUTPUT
Figure 4.1: An illustration of the definition of the fit error. The fit error is
calculated by dividing the difference area between the simulated and exper-
imental curves by the normalisation area.
between the simulated and experimental current-voltage curves normalised
with the maximum spanned area, as illustrated in Fig. 4.1.
If fit_mode is ’lin’ then the fit error ϵ is calculated as
1 (cid:90) Vmax
ϵ = |J −J |dV. (4.1)
exp sim
(J −J )(V −V )
max min max min Vmin
In the case of ‘log’ we only sum over currents for which the experimental
and simulated values have the same sign, and we calculate the fit error as
1 (cid:90) Vmax (cid:18) J (cid:19)
exp
ϵ = ln dV. (4.2)
(cid:16) (cid:17)
ln J
J
m
m
a
in
x (V
max
−V
min
) Vmin J sim
Note, we only use voltages (V) that converged.
ZimT shows its progress as it reads which times, voltages, and generation
rates should be simulated. As there can be very many such time steps, this
30

4.2. CURRENT-VOLTAGE CHARACTERISTIC
output (on screen) is shown only every outputRatio instances. ZimT shows
the external current and voltage, see section 2.8, including an error estimate
of the current. If one such combination of time, voltage, and generation rate
fails to converge, then ZimT switches to red font to warn the user.
4.2 Current-voltage characteristic
Thecurrent-voltagecharacteristicisstoredintheJVFile(SimSS)ortjFile
(ZimT). Itliststheexternalvoltageandcurrentdensity(seesection2.8), the
estimated error on the current, and the internal current density. The next
column shows the quasi-Fermi level splitting (in eV), averaged over each
layer, followed by a breakdown of the generation and recombination rates
(stored as their equivalent current densities), split into the contribution of
each layer.3 So for layer n one has:
• JphotoLn is the photogenerated current density,
• JdirLn is the direct (band-to-band) recombination current,
• JBulk is the recombination current due to bulk traps,
• JintLnLn+1 is the recombination current due to traps the interface
between layers n and n+1,
• JminLeft is the minority current at the left electrode,
• JminRight is the minority current at the right electrode,
• JShunt is the current flowing through the shunt resistance.
In transient simulations (like ZimT), the recombination currents of holes and
electrons can be different, so ZimT splits these currents into the hole and
electron contributions. ZimT will additionally show the time (first column)
and the ionic currents (Jnion, Jpion) as well as the displacement current
density JD.
4.3 Internal variables
The internal variables (x,V,n,p,J ,J , etc.) are stored in varFile so they
n p
maybeplottedtofurtheranalysetheresults. Abanddiagramcanreadilybe
3All are listed in A/m2.
31

4.4. SOLAR CELL PARAMETERS
plotted as the vacuum level, conduction and valence bands, and quasi-Fermi
levels are all included. The parameter outputRatio determines at which
voltages or times these variables are stored. Note, that writing many such
variables to file—for example, at every voltage—can slow down the simula-
tion simply due to I/O operations. The number of digits in the output can
be limited (which is usually desirable) by setting parameter limitDigits
to 1. If the number of digits is not limited, and depending on the size of
the floating point type used,4 the number of digits can be too large for some
graphing software to read.
Most of the internal variables are self-explanatory. A few, however, may
not be so obvious: ntb lists the density of electrons trapped by bulk traps
(summed over all levels) in m−3. The density of electrons trapped in inter-
face traps (so in m−2) is denoted by nti. In steady-state, when electrons
and holes recombine via a bulk trap (SHR recombination in the bulk), then
the recombination rates for electrons and holes are equal in every grid point
(BulkSRHn/p). In transient simulations, this is no longer true and they can
have different values. Recombination via interface traps (see section 2.6)
can also lead to different rates for electrons and holes: the overall rates
(JIntSRH in JVFile or tJFile) should be the same, but they need not be
the same in every grid point. Hence, the rates for electrons (IntSRHn) and
holes (IntSRHp) are also shown separately. The generation rates of electron-
hole pairs (G_ehp) and of free electrons and holes (Gfree) are also listed.
These will be the same unless the Onsager-Braun model is used, see section
2.5.
4.4 Solar cell parameters
SimSS will try to calculate the basic solar cell parameters (J , V , etc.) of
sc oc
the current-voltage characteristic it has calculated if the user is simulating
something that could be a solar cell under illumination. So this is only done
if there is a non-zero generation rate of carriers and if the work functions
of the electrodes are different. The errors that are shown are solely based
on the interpolation algorithm used, so they do not include the numerical
accuracy of the actual simulation. The propagation of errors is included in,
for example, calculating the maximum-power-point and the fill-factor. The
parameters are shown on screen and stored in the scParsFile. The pro-
gramwillcomparethesimulatedsolarcellparameterswiththeexperimental
ones if an experimental current-voltage curve was read (see useExpData and
4See type myReal as defined in unit TypesAndConstants.
32

4.5. THE LOG FILE
section 3.4). ZimT does not have this functionality.
4.5 The log file
Important messages are stored in a separate file, the log (see logFile). It
stores the version number, the size of the floating point type that was used,
and any values from the command lines. The latter is especially relevant as
itmakeitpossiblefortheusertocheckwhichvalueswereused. Forexample,
iftheuserwantstochangesomeparameterviathecommandline,butmakes
atypothenthelogfilewillsimplynotshowthisparameter. Takentogether,
the log file and the parameter file specify all parameters that were used in a
simulation. SimSS also lists which voltages it will simulate and whether the
ions are allowed to redistribute at those voltages.
If ZimT or SimSS fail to find an acceptable solution at some simulated
voltage or time, then it will write a short message in the log file to help the
user to understand what went wrong: For example, perhaps the main loop
was fine but the Poisson solver never converged. Or the Poisson loop was
happy, but the current density throughout the simulation volume was not
sufficientlyuniform. Seesection2.9formoredetailsontheiterationscheme.
4.6 Exit codes
When ZimT or SimSS run normally, then they return exit code 0. However,
when something happens, something unexpected, the exit code will be non-
zero, see Table 4.1. There are three cases: If the program finishes without
problem, but it did not simulate anything (for example, we used the option
-tidy), then the exit code is 3. Secondly, if the program encounters some-
thing strange, but it detects it in time (so it halts, but it does not crash!),
the exit code ranges from 90 –99. The free pascal compiler also has its own
list of exit codes. These will be passed on to the operating system in case
the program actually crashes, see Table 4.1 for a few typical cases.
33

4.6. EXIT CODES
Table 4.1: If the program cannot continue due to invalid input, a numerical
problem, or even a programming error, it will return a value ranging from
90 –99. If it crashes, then it will return an exit code that is larger than 99.
Code Meaning
3 Warning-like exit.
Error
90 Device parameter file corrupted
91 Invalid input (physics, or voltage in tVGFile too large)
92 Invalid input from command line
93 Numerical failure
94 Failed to converge, halt (failureMode = 0)
95 Failed to converge ≥ 1 point, not halt (failureMode ̸= 0)
96 Missing input file.
97 Runtime exceeds limit set by timeout.
99 Programming error (i.e. not due to the user!)
Fatal (crash)
106 Invalid numeric format.
200 Division by zero.
201 Range check error.
202 Stack overflow error (only if stack checking enabled).
205 Floating point overflow.
206 Floating point underflow.
207 Invalid floating point operation.
217 Unhandled exception occurred.
34

Chapter 5
Description of all parameters
5.1 Introductory remarks
All parameters can be set in the simulation_setup.txt file and layer files
or similar files with different names, see section 3.1. We have tried to break
up the parameters into coherent blocks: general, layers, Optics, mobilities
etc and split them between two types of files. One which contains the
more general parameters that define the device (simulation_setup.txt),
of which there can only be one, but this is specific for either SimSS or ZimT.
The other type of file contains the parameters that define a layer, where
each layer must have it’s own parameter file, but they are shared among
SimSS and ZimT. The order of the parameters cannot be changed as SimSS
and ZimT simply rely on the order of the input parameters to know which
value is what. Comments may be added after an asterisk.
Another way of setting individual parameters (except for the number of
layers) is to specify them in the command line. This is incredibly useful if
you want to run many simulations, for example on a cluster. In case of a
general parameter this would be like:
./simss -T 300
This will run SimSS with a temperature (T) of 300 K and overrides the
value that is specified in the file simulation_setup.txt. When changing a
parameter for a specific layer, the parameter name must be preceded by the
layer index parameter, see l1, separated by a dot, for example:1
./simss -l1.L 200E-9
1Note, although this is not case-sensitive, it is probably best simply to stick to the
exact spelling as defined in the parameter files.
35

5.2. DESCRIPTION OF SIMULATION PARAMETERS
This will run SimSS with a thickness (L) of 200 nm for the first layer and
overrides the value that is specified in the parameter file for the first layer.
There one option that can be used but that are not in the parameter
file:
./simss -h
willmakeSimSSshowashorthelpmessageandexit(evenifmoreparameters
are specified).
A note on the units: SimSS and ZimT use SI units only, except for eV
instead of J for work functions and other energies. So no cm2 or mA, but
only m2 or A.
5.2 Description of simulation parameters
Some parameters are specific to either SimSS or ZimT as indicated. The
parameters are listed as they appear in the files.
5.2.1 Simulation setup
The more general parameters like the number of layers, contacts, optics and
numerical parameters as defined in the simulation_setup.txt file.
version
Thecodeverifies thattheversion numberoftheparameterfile matchesthat
of the program. If not, it exits.
T
Temperature in K.
l1
Names of parameter files for layer 1 (mandatory).
l2
..
..
lN
Names of parameter files for rest of layers, from 2 to N (optional). Define
each layer on a separate line. Layer indices must be consecutive.
36

5.2. DESCRIPTION OF SIMULATION PARAMETERS
leftElec
Indicates whether the left electrode is the cathode (-1) or the anode (1). By
convention (in semiconductor simulation software), the left electrode is the
cathodeandthishasbeenthedefault. However,sometimesonewantstoflip
the device layout and the cathode is on the right. This also impacts the sign
of the current, as it flows in the opposite direction in the device. We take
the sign of the current such that injected (e.g. dark) current is positive if
theappliedvoltageispositive,regardlessofthechoiceofcathodeandanode.
W_L
Work function (eV) of the left electrode. Instead of inputting a fixed value,
one can also pass the string ’sfb’, which stands for ’semi-flat band’, which
will result in a work function equal to the equilibrium Fermi level of the
adjacent layer, without considering any ions and/or traps that might also
contribute space charge at the contact.
W_R
Workfunction(eV)oftherightelectrode. Insteadofinputtingafixedvalue,
one can also pass the string ’sfb’, which stands for ’semi-flat band’, which
will result in a work function equal to the equilibrium Fermi level of the
adjacent layer, without considering any ions and/or traps that might also
contribute space charge at the contact.
S_n_L
Surfacerecombinationvelocity(m/s)ofelectronsattheleftelectrode. Ifyou
would like to use an infinitely large surface recombination velocity, simply
use a negative value: in this case, the electron density at the left electrode
(n ) follows from the difference between the work function and the conduc-
L
tion band. See section 2.2.
S_p_L
Surface recombination velocity (m/s) of holes at the left electrode. If you
would like to use an infinitely large surface recombination velocity, simply
use a negative value: in this case, the hole density at the left electrode (p )
L
follows from the difference between the work function and the valence band.
See section 2.2.
S_n_R
Surface recombination velocity (m/s) of electrons at the right electrode.
If you would like to use an infinitely large surface recombination velocity,
37

5.2. DESCRIPTION OF SIMULATION PARAMETERS
simply use a negative value: in this case, the electron density at the right
electrode (n ) follows from the difference between the work function and
R
the conduction band. See section 2.2.
S_p_R
Surface recombination velocity (m/s) of holes at the right electrode. If you
would like to use an infinitely large surface recombination velocity, simply
use a negative value: in this case, the hole density at the right electrode
(p ) follows from the difference between the work function and the valence
R
band. See section 2.2.
R_shunt
This is the shunt resistance of the device (Ω m2). Use a negative value to
indicate an infinitely large shunt resistance (i.e. no shunt). If R_shunt is
finite, then the external current density J (the current density that is
ext
measured) equals
J = J +V /R_shunt, (5.1)
ext int int
where J is the internal current density—the current in the device flowing
int
between anode and cathode—and V is the applied voltage on the elec-
int
trodes. See section 2.8.
R_series
This is a resistance that is placed in series with the devices (Ω m2). Ideally,
this is zero and it cannot be negative. If R_series is positive, then the
external voltage (V ) is modified according to
ext
V = V +J R_series, (5.2)
ext int ext
where J is the external current density and V is the applied voltage on
ext int
the electrodes. See section 2.8.
G_frac (SimSS)
In SimSS, the actual average generation rate is set as a fraction of G_ehp.
We do this, as this makes it easier to do global fitting of a set of solar cells
as a function of light intensity where one knows the relative intensities (for
example, when using neutral density filters to attenuate the light). So, the
effective generation rate equals G_frac × G_ehp.
genProfile
This specifies the name of the file that contains the generation profile (see
38

5.2. DESCRIPTION OF SIMULATION PARAMETERS
section 3.2 for details). If set to ‘none’, then an uniform generation profile
is assumed over the absorbing layers. If set to ‘calc’ a calculated generation
profile based on the device structure and transfer matrices is used.
L_TCO
Thickness (m) of the TCO layer. When set to 0, no TCO layer is used.
L_BE
Thickness (m) of the back layer/electrode, must be ¿ 0.
nkSubstrate
Name of file with n,k values of substrate.
nkTCO
Name of file with n,k values of TCO layer. Use none if no TCO layer is
defined.
nkBE
Name of file with n,k values of the back electrode.
spectrum
Name of file that contains the spectrum.
lambda_min
Minimum wavelength (m), or the lower bound of the spectrum for the cal-
culated generation profile.
lambda_max
Maximum wavelength (m) or the upper bound of the spectrum for the cal-
culated generation profile.
NP
Integer value to specify the number of grid points. Must be at least 5 per
layer. The maximum number of grid points (Max_NP) is set in the unit
TypesAndConstants.
tolPois
Absolute tolerance of the Poisson solver (in V): if the largest change δV in
a grid point is smaller than this value, then the Poisson solver stops.
39

5.2. DESCRIPTION OF SIMULATION PARAMETERS
maxDelV
Maximum change (in terms of the thermal voltage) of the potential per loop
of the Poisson solver. This helps to limit the changes in the potential per
iteration and can help with convergence.
maxItPois
Maximum number (integer) of iterations of the Poisson solver. Typically a
few 100 iterations is plenty.
maxItSS
Maximum number of iterations of the main loop (so Poisson and continuity
equations) in steady-state. Note: SimSS is always a steady-state simulation.
maxItTrans (ZimT)
Maximum number of iterations of the main loop (so Poisson and continuity
equations) in transient simulations.
currDiffInt
This integer value (1 or 2) specifies how the electron and hole currents are
calculated. The standard way (1) of doing this is by using Eqs (2.6) and
(2.7); this means that we obtain the currents from the differentials of the
of the potential and the densities. If the integral form (2) is chosen, then
the current is calculated by integrating Eq. (2.3), or its transient cousin (for
ZimT) Eqs (2.4) and (2.5).
tolDens
Relative tolerance of the density solver. See section 2.9.
couplePC
This non-negative floating point number sets the coupling between the Pois-
son solver and the continuity equations. The Poisson solver changes the
carrier densities (n and p, but also the ionic densities) to reflect any changes
to the potential. This helps (quite a lot) in finding a solution. In order
to improve the stability of the code, however, it can be helpful to reduce
this coupling (smaller couplePC). Setting couplePC = 0 means that the
densities are not changed by the Poisson solver.
minAcc
Minimumaccelerationparameter(mustbepositive,yetsmallerthanmaxAcc).
To enable successive over- and under relaxation, we use an acceleration pa-
40

5.2. DESCRIPTION OF SIMULATION PARAMETERS
rameter for the solver of the charge densities. This acceleration parameter
(r) depends on the number of performed iterations and varies from maxAcc
initially downto minAcc in the last iteration loop. So, in loop k we have
r(k) = maxAcc−(maxAcc−minAcc)k/maxIt, (5.3)
where maxIt is either maxItSS or maxItTrans, depending on whether this is
a steady-state or transient simulation. The acceleration parameter is then
used to dampen (if r < 1) or accelerate (if r > 1) the main loop. For
example, let nk be the electron density in grid point i and loop k and δnk
i i
the calculated change, then
nk = r(k)δnk +nk−1. (5.4)
i i i
maxAcc
Maximum acceleration parameter (see minAcc for details and use). Must be
smaller than 2 but larger than minAcc.
ignoreNegDens
Integer value that indicates what to do if the continuity solver finds a neg-
ative carrier density (including an ionic density) in a grid point. If not 1
and there is a density on some grid point that is negative, then the program
quits. If 1, then we simply ignore this and set that density to some small
value. This can be really helpful if the density becomes very small so the
difference between zero, small&positive, and small&negative becomes prob-
lematic due to the finite number of digits.
failureMode
Integer value that specifies what should be done if the main loop does not
convergeforsomevoltage/time. 0: awarningmessageisshownandthepro-
gram exits, 1: the solution is accepted, so failure is ignored. 2: the current
voltage/timeisskipped. InSimSSthereisnorealdifferencebetween1and2.
In ZimT, however, this is very different. If the simulation at some time
does not converge, then this time point is simply skipped and we move on
to the next point in the tVGFile. The time step is thus enlarged as the last
time point that converged is used to calculate the time step and displace-
ment current. This is useful as there are, from time to time, points that
41

5.2. DESCRIPTION OF SIMULATION PARAMETERS
simply do not converge.
grad
This parameter determines that gradient of the grid used. grad = 0 cor-
responds to uniform grid spacing, a positive value will make the grid spac-
ing finer near the electrodes and internal interfaces. Setting grad to values
largerthanabout4willyieldextremelysmall—borderingontheridiculous—
spacing near the electrodes.
tolVint (ZimT)
Tolerance (V) that determines how accurately the internal voltage (Vint)
is solved for. In ZimT, one specifies the external voltage (Vext) and the
internal voltage need not be known. If not, then Vint is solved for via an
iterative procedure (bisection).
Vdist (SimSS)
Integer that is either 1 or 2. This specifies the distribution of voltages that
willbesimulated. If1,thenthisdistributionisuniform(specifiedbyVstep).
If it is 2, then a logarithmic distribution is used (specified by Vacc and NJV).
The latter is useful when the results will be plotted on a logarithmic voltage
axis. Note: ignored if useExpData is 1.
preCond (SimSS)
Integer value. If 1, then a pre-bias will be applied (pre-conditioning). This
can be used if there are ions in the device and we would like to see if pre-
biasing affects the current-voltage curve: First, this bias (Vpre) is applied
and the ionic densities are calculated. The exact voltages at which the ion
distributions are solved and updated are stored in the logFile. Note, this
cannot be used if useExpData or untilVoc is 1.
Vpre (SimSS)
The pre-conditioning voltage (V), see preCond.
fixIons (SimSS)
Integer (0 or 1). If 1, the ions are fixed at the first applied voltage.
Vscan (SimSS)
Integer (-1 or 1). This indicates whether the voltage should be swept up (1)
or down (-1). Note: ignored if useExpData is 1.
42

5.2. DESCRIPTION OF SIMULATION PARAMETERS
Vmin (SimSS)
Minimum voltage (V) that will be simulated, unless useExpData is 1. The
maximum (absolute) value that is accepted depends on the size of the float-
ing point type used (type myReal defined in unit TypesAndConstants).
Vmax (SimSS)
Minimum voltage (V) that will be simulated, unless useExpData is 1. The
maximum value that is accepted depends on the size of the floating point
type used (type myReal defined in unit TypesAndConstants).
Vstep (SimSS)
Voltage step (V) used if Vdistribution is 1, unless useExpData is 1.
Vacc (SimSS)
Ifalogarithmicdistributionofvoltagesisused(Vdistis2),thenthisparam-
eter (V) specifies the accumulation point of a row of voltages. The step size
(difference between consecutive voltages) becomes zero at Vacc, so it should
lie outside the interval should lie outside [Vmin, Vmax]. Moving Vacc closer
to either boundary, will result in smaller voltage steps at either boundary.
Note: ignored if usExpData is 1.
NJV (SimSS)
Number (so integer) of voltage points in the logarithmic voltage distribu-
tion. Note: ignored if useExpData is 1.
untilVoc (SimSS)
Integer value. If 1, then the simulation will stop if the simulated current is
positive (i.e. V > V ) provided there is light (G_ehp non-zero). Cannot be
oc
used if useExpData is 1.
timeout
Maximumruntimeinseconds. Specifyinganegativevalueimpliesunlimited
runtime.
pauseAtEnd
If 1, then the program will wait for the user to press Enter once it is done.
autoTidy
Integer value. If 1, then the device parameter file will be tidied up when
running SimSS or ZimT and the simulation will proceed as usual. This en-
43

5.2. DESCRIPTION OF SIMULATION PARAMETERS
sures that the parameter file stays neat with all comments nicely aligned.
autoStop (ZimT)
Integervalue. If1,thenZimTtriestoidentifyifithasreachedasteady-state,
which means it would be pointless to keep on simulating. This depends on
the voltage and light intensity in the tVG_file but also on the current or
voltage that ZimT calculates. If the changes are very small and this param-
eter is 1, then ZimT stops.
useExpData (SimSS)
Integer value. If 1, then the program should read an experimental current-
voltage (JV) curve: SimSS will simulate the same voltages that occur in
the file (overriding any other specification of voltages). Once it is done,
SimSS will output a comparison between the simulated and experimental
JV curves, including an r.m.s. error (see fitMode). The experimental JV
curve should be stored in expJV.
expJV (SimSS)
Name of the file with the experimental current-voltage (JV) curve. The
program will try to read this file is useExpData is 1. For a definition of the
file format see section 3.4.
fit_mode (SimSS)
This indicates how the fit error should be calculated when comparing a sim-
ulated with an experimental current-voltage curve. Must be either ‘lin’ or
‘log’. Ifthefractionofvoltagesthatconvergedissmallthanfit_threshold
then no fit error is calculated.
fit_threshold (SimSS)
Seefit_mode. Iffewerthanthisfractionofvoltageswereusedincomputing
the fit error then no fit error is shown.
tVGFile (ZimT)
This file contains a list of times, voltages and generation rates. See section
3.5.
JVFile (SimSS)
SimSS will store the simulated current-voltage characteristics in this file.
tjFile (ZimT)
44

5.2. DESCRIPTION OF SIMULATION PARAMETERS
Name of the output file with the calculated time, voltages, current density.
ZimT outputs every time step (if successful) to this file.
varFile
Name of the file where the internal variables (x,V,n,p,Jn,Jp, etc.) are
stored. If no such output is required, then simply put ‘none’ (ZimT only).
limitDigits
An integer value. If 1, then the number of digits in the output is limited to
a sensible value (depends on the number of digits used in the floating point
type myReal (see unit TypesAndConstants). If not 0, then the full length
of the floating point type is stored (which, again, depends on the size of
myReal).
outputRatio (SimSS)
Non-negative integer value. If zero, the internal variables (see section 4.3)
will not be stored at all. If positive, the internal variables will be stored in
varFile every outputRatio voltages. Note, that writing many such vari-
ables to file—for example, at every voltage—can slow down the simulation
simply due to I/O operations.
outputRatio (ZimT)
Positiveintegervalue. TheinternalvariableswillbestoredinvarFileevery
outputRatio time-steps, unless varFile is set to ‘none’. Note, that writing
many such variables to file—for example, at every voltage—can slow down
the simulation simply due to I/O operations. The same ratio is applied to
the screen output so it cannot be zero as that would mean there would be
no screen output.
scParsFile (SimSS)
SimSS will try to figure out if the user wants to simulate a device that could
be a solar cell—based on the work functions and whether there is light. If
so, it will attempt to calculate the main performance characteristics (open-
circuit voltage, short-circuit current, fill-factor, maximum power point) and
will store these in this file.
logFile (SimSS)
ZimT and SimSS generate some output in a log file (see section 4.5). This
parameter sets its name.
45

5.2. DESCRIPTION OF SIMULATION PARAMETERS
5.2.2 Layer specific parameters
The parameters that define the properties of a layer such as generation,
recombination, mobilities, trapping and ions. Each layer has its own file
and the structure of the file is the same for each layer.
version
Thecodeverifies thattheversion numberoftheparameterfile matchesthat
of the program. If not, it exits.
L
Thickness (m) of the layer.
eps_r
Relative dielectric constant.
E_c
Conduction band edge (eV, positive).
E_v
Valence band edge (eV, positive).
N_c
Effective density of states (m−3) of the conduction and valence bands.
N_D
Ionised n-doping (m−3).
N_A
Ionised p-doping (m−3).
mu_n
Electron mobility (m2/Vs) at zero field.
mu_p
Hole mobility (m2/Vs) at zero field.
mobnDep
Thisintegervalue(0or1)specifieswhethertheelectronmobilityisconstant
(0) or is field-dependent (1). The field-dependence is of the form
(cid:16) √ (cid:17)
µ(F) = µ exp γ F , (5.5)
n
46

5.2. DESCRIPTION OF SIMULATION PARAMETERS
where µ is the zero-field mobility (mu_n), F is the absolute electric field,
n
and γ is the field activation factor for electrons gamma_n.
mobpDep
This integer value (0 or 1) specifies whether the hole mobility is constant
(0) or is field-dependent (1). The field-dependence is of the form
(cid:16) √ (cid:17)
µ(F) = µ exp γ F , (5.6)
p
where µ is the zero-field mobility (mu_p), F is the absolute electric field,
p
and γ is the field activation factor for holes gamma_p.
gamma_n
(cid:112)
Field-activation factor ( m/V) of the electron mobility. Only relevant if
mobnDep is set to 1.
gamma_p
(cid:112)
Field-activation factor ( m/V) of the hole mobility. This is only relevant
if mobpDep is set to 1.
nu_int_n
Interface transfer velocity (m/s) of electrons to layer to the right. Inter-
nally, nu_int_n is converted to a mobility µ at the interface such that the
int
current-voltage curve does not depend on the grid spacing:
µ = (q/kT)∆xnu_int_n, (5.7)
int
where ∆x is the (local) grid spacing. See section 2.3 for details.
nu_int_p
Interface transfer velocity (m/s) of holes to layer to the right. Internally,
nu_int_p is converted to a mobility µ at the interface such that the
int
current-voltage curve does not depend on the grid spacing:
µ = (q/kT)∆xnu_int_p, (5.8)
int
where ∆x is the (local) grid spacing. See section 2.3 for details.
N_t_int
Number of traps per area (m−2) at the interface with the layer to the right.
47

5.2. DESCRIPTION OF SIMULATION PARAMETERS
E_t_int
Energy level (relative to vacuum, eV) of traps at the interface with the layer
to the right.
intTrapFile
This specifies the name of the file that is used to specify multiple inter-
face trap levels, see section 3.3 for details). Using such a file means that
E_t_int is ignored for traps at the interface with the layer to the right. If
set to ‘none’, then this file is not read and the trap level (if any) is taken
from E_t_int.
intTrapType
Integer value (-1, 0, 1) to specify the type of trap at the interface with the
layer to the right: -1: acceptor, 0: neutral, 1: donor.
C_n_int
Capture coefficient (m3 s−1) for electrons for traps at the interface with the
layer to the right. Set to 0 in order to exclude capture from and emission
to the conduction band.
C_p_int
Capture coefficient (m3 s−1) for holes for traps at the interface with the
layer to the right. Set to 0 in order to exclude capture from and emission
to the valence band.
N_anion
Concentration of negative ions (m−3). Note, it does not matter whether
theseareions,dopants,orvacancies. Itissimplyasinglynegativelycharged
species that may move or not.
N_cation
Concentration of positive ions (m−3). Note, it does not matter whether
these are ions, dopants, or vacancies. It is simply a singly positively charged
species that may move or not.
mu_anion
Mobility of negative ions (m−2/Vs). Take 0 if they are not supposed to
move, this will result in a uniform profile for this layer.
48

5.2. DESCRIPTION OF SIMULATION PARAMETERS
mu_cation
Mobilityofpositiveions(m−2/Vs). Take0iftheyarenotsupposedtomove,
this will result in a uniform profile for this layer.
ionsMayEnter
Integer value to indicate whether ions can enter from other layers (yes=1,
no̸=1).
G_ehp
Thegenerationrate(m−3 s−1)ofelectron-holepairsinthislayer. Onlyused
if there is no generation profile (either supplied by the user or calculated us-
ing the transfer matrix algorithm). Parameter G_frac rescales this value.
Note: thegenerationrateoffreeelectronsandholescanbesmallerthanthis
if the Onsager-Braun model is employed. When the value of the generation
rate is defined in the generation profile, set to 1.
layerGen
Integervaluetoindicatewhetherthislayerabsorbs/generateselectron-hole
pairs (yes=1, no̸=1). This overrides a user-defined or calculated generation
profile in case this is specified (as defined by parameter genProfile).
nkLayer
Name of file with n,k values of this layer.
fieldDepG
Integer value to indicate whether field-dependent splitting of electron-hole
pairs should be used (yes=0, no̸=1). See section 2.5.
P0
Fraction of electron-hole pairs that directly yield free charge carriers. Only
relevant if the Onsager-Braun model of charge generation is used. See sec-
tion 2.5.
a
Charge separation distance (m) in the Onsager-Braun model.
thermLengDist
Integervaluethatselectswhichdistributionofthermalisationlengthsshould
beusedintheOnsager-Braunmodel. (1)specifiesadeltafunction,theother
distributions are:
49

5.2. DESCRIPTION OF SIMULATION PARAMETERS
2: Gaussian
(cid:20) (cid:21)
4 (cid:16)r(cid:17)2
g(a,r) = √ r2exp − (5.9)
a3 π a
3: Exponential
1 (cid:104) r(cid:105)
g(a,r) = exp − (5.10)
a a
4: r2 exponential
r2 (cid:104) r(cid:105)
g(a,r) = exp − (5.11)
2a3 a
5: r4 Gaussian
8r4 (cid:20) (cid:16)r(cid:17)2 (cid:21)
g(a,r) = √ r2exp − . (5.12)
3a5 π a
k_f
Decay rate (1/s) of charge-transfer states as used in the Onsager-Braun
model.12–14
k_direct
Rate constant (m3/s) of direct (band-to-band, or bimolecular) recombina-
tion.
preLangevin
Prefactor of the Langevin expression, should be positive but not larger than
1.
useLangevin
Integer value to specify whether the rate constant of direct recombination
is calculated from the Langevin expression (1) or not (̸=1). In the former
case, preLangevin is used in conjunction with the Langevin expression. In
the latter, k_direct is used.
N_t_bulk
Defines the density (m−3) of traps in the bulk of the layer.
E_t_bulk
Energy level (relative to vacuum, eV) of traps in the bulk.
bulkTrapFile
This specifies the name of the file that is used to specify multiple bulk trap
50

5.3. HOW TO CHOOSE THE NUMERICAL PARAMETERS
levels, see section 3.3 for details). Using such a file means that E_t_bulk
is ignored for bulk traps. If set to ‘none’, then this file is not read and the
trap level (if any) is taken from E_t_bulk.
bulkTrapType
Integer value (-1, 0, 1) to specify the type of bulk trap: -1: acceptor, 0:
neutral, 1: donor.
C_n_bulk
Capture coefficient (m3 s−1) for electrons for traps in the bulk. Set to 0 in
order to exclude capture from and emission to the valence band.
C_p_bulk
Capture coefficient (m3 s−1) for holes for traps in the bulk. Set to 0 in order
to exclude capture from and emission to the valence band.
5.3 How to choose the numerical parameters
Whether or not the simulation converges depends on the physical param-
eters: large densities of traps or ions, widely different electron and hole
mobilities, strong illumination conditions, large steps in time, light intensity
or voltage all add to the challenge of finding a solution. If SimSS or ZimT
struggle, or even fail, to find a solution, then it might help to modify the
numerical parameters. Table 5.1 shows the most relevant numerical param-
eters and their typical values. Refer to section 2.9 to make the best use of
tweaks to these parameters.
The numerical parameters impact the speed, convergence, accuracy, or
any combination of these. The main ones being NP, tolDens, minAcc,
maxAcc and grad. While NP and tolDens greatly influence the speed and
convergence they also govern the accuracy of the solution. On the other
hand, grad can—in some cases—really improve the speed without sacrific-
ing the accuracy of the solution.
For transient simulations, one has to define an input file with times,
voltages, etc. Obviously, the resulting time steps impact the accuracy of the
simulation, with larger time steps typically being less accurate than smaller
ones. Itmight,therefore,betemptingtouseverysmalltimesteps,especially
if ZimT struggles to converge. However, extremely small time steps can be
the cause of the problem: If the time step is very small (for example 1 ps),
51

5.3. HOW TO CHOOSE THE NUMERICAL PARAMETERS
Table 5.1: Typical value of the most important numerical parameters: they
affect the accuracy, speed, and convergence behaviour of the simulations.
These values are merely intended as a starting point and may require tai-
loring in order to get the best results.
parameter typical value comments
NP 100–400 increase if high accuracy is required
tolPois 1e-3–1e-4
maxDelV 1–10 reduce if convergence is difficult
maxItPois 100
maxItSS 300 larger values can make sense in ZimT
maxItTrans 100 ZimT only
tolDens 1e-7 reduce if high accuracy is needed, increase if convergence is difficult
minAcc 0.1 reduce if convergence is difficult
maxAcc 0.95 reduce if program crashes
grad 0–4
tolVint 1e-6 ZimT only
then any noise in the potential or charge density is amplified which leads
to a large displacement current. As a result, the total current might not be
sufficiently uniform and ZimT does not converge. Thus, while reducing the
time step can help in obtaining a stable and accurate solution, care must be
taken not to overdo it.
52

Bibliography
[1] S. Selberherr, Analysis and Simulation of Semiconductor Devices
(Springer-Verlag, Wien, 1984).
[2] W. Shockley and W.T. Read, Jr., Phys. Rev. 87, 835 (1952).
[3] M. Koopmans and L.J.A. Koster, Sol. RRL 2200560 (2022).
[4] C. Snowden, Introduction to Semiconductor Device Modelling (World
Scientific, Singapore, 1986).
[5] M. Gruber, B.A. Stickler, G. Trimmel, F. Schu¨rrer, and K. Zojer,
Org. Electron. 11, 1999 (2010).
[6] L. Kru¨ckemeier, B. Krogmeier, Z. Liu, U. Rau, and T. Kirchartz,
Adv. Energy Mater. 11, 2003489 (2021).
[7] O.W. Purbo, D.T. Cassidy, and S.H. Chrisholm, J. Appl. Phys. 66,
5078 (1989).
[8] G.F. Burkhard, E.T. Hoke and M.D. McGehee, Adv. Mater. 22, 3293
(2010).
[9] L.A. Petterson, L.A. Roman and O. Ingan¨as, J. Appl. Phys. 86, 487
(1999).
[10] P. Peumans, A. Yakimov and S.R. Forrest, J. Appl. Phys. 93, 3693
(2003).
[11] A.H. Marshak, Solid State Electron. 30, 1089 (1987).
[12] V.D.Mihailetchi,L.J.A.Koster,J.C.Hummelen,andP.W.M.Blom,
Phys. Rev. Lett. 93, 216601 (2004).
[13] L. J. A. Koster, E. C. P. Smits, V. D. Mihailetchi, and P. W. M. Blom,
Phys. Rev. B 72, 085205 (2005).
53

BIBLIOGRAPHY
[14] C. L. Braun, J. Chem. Phys. 80, 4157 (1984).
[15] H. K. Gummel, IEEE Trans. Electron Devices 11, 455 (1964).
54

